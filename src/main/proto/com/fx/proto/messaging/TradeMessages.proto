syntax = "proto3";

package com.fx.proto.messaging;

message Trade   {
    TradeKeyVersion trade_key_version = 1;
    string ccy_pair = 2;
    string buy_sell = 3;
    string dealt_ccy = 4;
    double dealt_amount = 5;
    double counter_amount = 6;
    string trade_date = 7;
    string value_date = 8;
    string fixing_date = 9;
    double usd_amount = 10;
}

//message TradesSubscriptionRequestMessage{
//    string session_key = 1;
//}
//
//message TradesSubscriptionResponseMessage    {
//    string session_key = 1;
//    TradeSummary summary = 2;
//    repeated Trade trades = 3;
//}
//
//message TradeSummary    {
//    uint32 total_trades = 1;
//    uint32 trades_valuedate_today = 2;
//    uint32 trades_tradedate_today = 3;
//}

message PortfolioSubscriptionRequestMessage {
    oneof request_message   {
        BlotterSubscriptionRequest blotter_subscription_request = 1;
        BlotterFillRequest blotter_fill_request = 2;
        TradeResolutionRequest trade_resolution_request = 3;
    }
}

message PortfolioSubscriptionResponseMessage {
    oneof request_message   {
        BlotterSubscriptionResponse blotter_subscription_response = 1;
        BlotterFillResponse blotter_fill_response = 2;
        TradeResolutionResponse trade_resolution_response = 3;
    }
}

message BlotterSubscriptionRequest  {
    string session_key = 1;
    SortQuery sort_query = 2;
    FilterQuery filter_query = 3;
}

message BlotterSubscriptionResponse  {
    string session_key = 1;
    SortQuery sort_query = 2;
    FilterQuery filter_query = 3;
    SummaryResponse summary_response = 4;
    int64 total_trade_count = 5;
    double total_trade_volume = 6;
    bool success = 7;
    string error_message = 8;
}

message BlotterFillRequest  {
    string session_key = 1;
    int64 start_index = 2;
    int64 end_index = 3;
}

message BlotterFillResponse  {
    ResponseStatus response_status = 1;
    string session_key = 2;
    int64 start_index = 3;
    int64 end_index = 4;
    repeated TradeKeyVersion trades_data = 5;
}

message TradeResolutionRequest  {
    string session_key = 1;
    repeated TradeKeyVersion trade_keys = 2;
}

message TradeResolutionResponse  {
    string session_key = 1;
    repeated Trade trades = 2;
}

message TradeKeyVersion {
    string trade_key = 1;
    int32 trade_version = 2;
}

message ResponseStatus  {
    bool success = 1;
    string error_message = 2;
}

message SummaryResponse {
    repeated SummaryList summary = 1;
}

message SummaryList {
    repeated Statistics statistics = 2;
}

message Statistics  {
    string key = 2;
    int64 count = 3;
    double volume = 4;
}

message SortQuery   {
    repeated SortField fields = 1;
}

message SortField   {
    enum StaticField    {
        CURRENCY_PAIR = 0;
        BUY_SELL = 1;
        DEALT_CCY = 2;
        DEALT_AMOUNT = 3;
        COUNTER_AMOUNT = 4;
    }
}

message FilterQuery   {
    repeated KeyValues filter_keys = 1;
}

message KeyValues   {
    KeyValue.KeyField key = 1;
    repeated Criterium criteria = 2;
}

message KeyValue   {
    enum KeyField    {
        CURRENCY_PAIR = 0;
        BUY_SELL = 1;
        DEALT_CCY = 2;
        DEALT_AMOUNT = 3;
        COUNTER_AMOUNT = 4;
    }
}

message Criterium   {
    string operator1 = 1;
    string value1 = 2;
    string operator2 = 3;
    string value2 = 4;
    string absolute = 5;
}